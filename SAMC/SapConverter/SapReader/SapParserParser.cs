//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SapParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class SapParserParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, INTIGER=22, DOUBLE=23, EQUALS=24, 
		WHITESPACE=25, NEWLINE=26, TEXT=27, DOUBLEQOUTEDTEXT=28, ANY=29;
	public const int
		RULE_file = 0, RULE_table = 1, RULE_table_content = 2, RULE_table_row = 3, 
		RULE_table_row_item = 4, RULE_table_footer = 5, RULE_data = 6;
	public static readonly string[] ruleNames = {
		"file", "table", "table_content", "table_row", "table_row_item", "table_footer", 
		"data"
	};

	private static readonly string[] _LiteralNames = {
		null, "'TABLE:  \"PROGRAM CONTROL\"'", "'TABLE:  \"JOINT COORDINATES\"'", 
		"'TABLE:  \"CONNECTIVITY - AREA\"'", "'TABLE:  \"AREA SECTION PROPERTIES\"'", 
		"'TABLE:  \"AREA SECTION ASSIGNMENTS\"'", "'TABLE:  \"JOINT RESTRAINT ASSIGNMENTS\"'", 
		"'TABLE:  \"MATERIAL PROPERTIES 01 - GENERAL\"'", "'TABLE:  \"MATERIAL PROPERTIES 02 - BASIC MECHANICAL PROPERTIES\"'", 
		"'TABLE:  \"ACTIVE DEGREES OF FREEDOM\"'", "'TABLE:  \"FRAME SECTION PROPERTIES 01 - GENERAL\"'", 
		"'TABLE:  \"FRAME SECTION ASSIGNMENTS\"'", "'TABLE:  \"CONNECTIVITY - FRAME\"'", 
		"'TABLE:  \"LOAD PATTERN DEFINITIONS\"'", "'TABLE:  \"JOINT LOADS - FORCE\"'", 
		"'TABLE:  \"FRAME LOADS - DISTRIBUTED\"'", "'TABLE:  \"AREA LOADS - UNIFORM\"'", 
		"'TABLE:  \"LOAD CASE DEFINITIONS\"'", "'TABLE:  \"CASE - STATIC 1 - LOAD ASSIGNMENTS\"'", 
		"'TABLE:  \"COMBINATION DEFINITIONS\"'", "'TABLE:'", "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "INTIGER", 
		"DOUBLE", "EQUALS", "WHITESPACE", "NEWLINE", "TEXT", "DOUBLEQOUTEDTEXT", 
		"ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SapParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SapParserParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SapParserParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SapParserParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SapParserParser.Eof, 0); }
		public TableContext[] table() {
			return GetRuleContexts<TableContext>();
		}
		public TableContext table(int i) {
			return GetRuleContext<TableContext>(i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(SapParserParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(SapParserParser.TEXT, i);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(SapParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(SapParserParser.WHITESPACE, i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(SapParserParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(SapParserParser.NEWLINE, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHITESPACE) | (1L << NEWLINE) | (1L << TEXT))) != 0)) {
				{
				{
				State = 14;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHITESPACE) | (1L << NEWLINE) | (1L << TEXT))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 20; table();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0) );
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHITESPACE) | (1L << NEWLINE) | (1L << TEXT))) != 0)) {
				{
				{
				State = 25;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHITESPACE) | (1L << NEWLINE) | (1L << TEXT))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 31; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableContext : ParserRuleContext {
		public TableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table; } }
	 
		public TableContext() { }
		public virtual void CopyFrom(TableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FrameElementsSectionsTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public FrameElementsSectionsTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterFrameElementsSectionsTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitFrameElementsSectionsTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameElementsSectionsTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FrameElementsJointsTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public FrameElementsJointsTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterFrameElementsJointsTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitFrameElementsJointsTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameElementsJointsTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OtherTableContext : TableContext {
		public ITerminalNode DOUBLEQOUTEDTEXT() { return GetToken(SapParserParser.DOUBLEQOUTEDTEXT, 0); }
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(SapParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(SapParserParser.WHITESPACE, i);
		}
		public OtherTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterOtherTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitOtherTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ActiveDegressTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public ActiveDegressTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterActiveDegressTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitActiveDegressTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActiveDegressTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoadCaseTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public LoadCaseTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterLoadCaseTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitLoadCaseTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadCaseTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AreaSectionsTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public AreaSectionsTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterAreaSectionsTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitAreaSectionsTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAreaSectionsTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AreaSectionAssignmentsTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public AreaSectionAssignmentsTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterAreaSectionAssignmentsTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitAreaSectionAssignmentsTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAreaSectionAssignmentsTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoundaryConditionsTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public BoundaryConditionsTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterBoundaryConditionsTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitBoundaryConditionsTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoundaryConditionsTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaterialsTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public MaterialsTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterMaterialsTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitMaterialsTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialsTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoadPatternsTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public LoadPatternsTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterLoadPatternsTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitLoadPatternsTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadPatternsTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaterialsPropertiesTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public MaterialsPropertiesTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterMaterialsPropertiesTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitMaterialsPropertiesTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialsPropertiesTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AreaLoadsUniformTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public AreaLoadsUniformTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterAreaLoadsUniformTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitAreaLoadsUniformTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAreaLoadsUniformTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FrameLoadsTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public FrameLoadsTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterFrameLoadsTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitFrameLoadsTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameLoadsTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ProgramControlTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public ProgramControlTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterProgramControlTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitProgramControlTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramControlTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AreaElementsWithoutSectionsTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public AreaElementsWithoutSectionsTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterAreaElementsWithoutSectionsTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitAreaElementsWithoutSectionsTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAreaElementsWithoutSectionsTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoadCaseAssignmentsTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public LoadCaseAssignmentsTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterLoadCaseAssignmentsTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitLoadCaseAssignmentsTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadCaseAssignmentsTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointsTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public PointsTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterPointsTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitPointsTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointsTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointsLoadsTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public PointsLoadsTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterPointsLoadsTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitPointsLoadsTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointsLoadsTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoadCombinationTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public LoadCombinationTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterLoadCombinationTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitLoadCombinationTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadCombinationTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FrameSectionsTableContext : TableContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public Table_contentContext table_content() {
			return GetRuleContext<Table_contentContext>(0);
		}
		public Table_footerContext table_footer() {
			return GetRuleContext<Table_footerContext>(0);
		}
		public FrameSectionsTableContext(TableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterFrameSectionsTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitFrameSectionsTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameSectionsTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableContext table() {
		TableContext _localctx = new TableContext(Context, State);
		EnterRule(_localctx, 2, RULE_table);
		int _la;
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				_localctx = new ProgramControlTableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 33; Match(T__0);
				State = 34; Match(NEWLINE);
				State = 35; table_content();
				State = 36; table_footer();
				}
				break;
			case T__1:
				_localctx = new PointsTableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 38; Match(T__1);
				State = 39; Match(NEWLINE);
				State = 40; table_content();
				State = 41; table_footer();
				}
				break;
			case T__2:
				_localctx = new AreaElementsWithoutSectionsTableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 43; Match(T__2);
				State = 44; Match(NEWLINE);
				State = 45; table_content();
				State = 46; table_footer();
				}
				break;
			case T__3:
				_localctx = new AreaSectionsTableContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 48; Match(T__3);
				State = 49; Match(NEWLINE);
				State = 50; table_content();
				State = 51; table_footer();
				}
				break;
			case T__4:
				_localctx = new AreaSectionAssignmentsTableContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 53; Match(T__4);
				State = 54; Match(NEWLINE);
				State = 55; table_content();
				State = 56; table_footer();
				}
				break;
			case T__5:
				_localctx = new BoundaryConditionsTableContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 58; Match(T__5);
				State = 59; Match(NEWLINE);
				State = 60; table_content();
				State = 61; table_footer();
				}
				break;
			case T__6:
				_localctx = new MaterialsTableContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 63; Match(T__6);
				State = 64; Match(NEWLINE);
				State = 65; table_content();
				State = 66; table_footer();
				}
				break;
			case T__7:
				_localctx = new MaterialsPropertiesTableContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 68; Match(T__7);
				State = 69; Match(NEWLINE);
				State = 70; table_content();
				State = 71; table_footer();
				}
				break;
			case T__8:
				_localctx = new ActiveDegressTableContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 73; Match(T__8);
				State = 74; Match(NEWLINE);
				State = 75; table_content();
				State = 76; table_footer();
				}
				break;
			case T__9:
				_localctx = new FrameSectionsTableContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 78; Match(T__9);
				State = 79; Match(NEWLINE);
				State = 80; table_content();
				State = 81; table_footer();
				}
				break;
			case T__10:
				_localctx = new FrameElementsSectionsTableContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 83; Match(T__10);
				State = 84; Match(NEWLINE);
				State = 85; table_content();
				State = 86; table_footer();
				}
				break;
			case T__11:
				_localctx = new FrameElementsJointsTableContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 88; Match(T__11);
				State = 89; Match(NEWLINE);
				State = 90; table_content();
				State = 91; table_footer();
				}
				break;
			case T__12:
				_localctx = new LoadPatternsTableContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 93; Match(T__12);
				State = 94; Match(NEWLINE);
				State = 95; table_content();
				State = 96; table_footer();
				}
				break;
			case T__13:
				_localctx = new PointsLoadsTableContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 98; Match(T__13);
				State = 99; Match(NEWLINE);
				State = 100; table_content();
				State = 101; table_footer();
				}
				break;
			case T__14:
				_localctx = new FrameLoadsTableContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 103; Match(T__14);
				State = 104; Match(NEWLINE);
				State = 105; table_content();
				State = 106; table_footer();
				}
				break;
			case T__15:
				_localctx = new AreaLoadsUniformTableContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 108; Match(T__15);
				State = 109; Match(NEWLINE);
				State = 110; table_content();
				State = 111; table_footer();
				}
				break;
			case T__16:
				_localctx = new LoadCaseTableContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 113; Match(T__16);
				State = 114; Match(NEWLINE);
				State = 115; table_content();
				State = 116; table_footer();
				}
				break;
			case T__17:
				_localctx = new LoadCaseAssignmentsTableContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 118; Match(T__17);
				State = 119; Match(NEWLINE);
				State = 120; table_content();
				State = 121; table_footer();
				}
				break;
			case T__18:
				_localctx = new LoadCombinationTableContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 123; Match(T__18);
				State = 124; Match(NEWLINE);
				State = 125; table_content();
				State = 126; table_footer();
				}
				break;
			case T__19:
				_localctx = new OtherTableContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 128; Match(T__19);
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WHITESPACE) {
					{
					{
					State = 129; Match(WHITESPACE);
					}
					}
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 135; Match(DOUBLEQOUTEDTEXT);
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WHITESPACE) {
					{
					{
					State = 136; Match(WHITESPACE);
					}
					}
					State = 141;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 142; Match(NEWLINE);
				State = 143; table_content();
				State = 144; table_footer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_contentContext : ParserRuleContext {
		public Table_rowContext[] table_row() {
			return GetRuleContexts<Table_rowContext>();
		}
		public Table_rowContext table_row(int i) {
			return GetRuleContext<Table_rowContext>(i);
		}
		public Table_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_content; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterTable_content(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitTable_content(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_content(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_contentContext table_content() {
		Table_contentContext _localctx = new Table_contentContext(Context, State);
		EnterRule(_localctx, 4, RULE_table_content);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 148; table_row();
					}
					} 
				}
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_rowContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(SapParserParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(SapParserParser.NEWLINE, i);
		}
		public Table_row_itemContext[] table_row_item() {
			return GetRuleContexts<Table_row_itemContext>();
		}
		public Table_row_itemContext table_row_item(int i) {
			return GetRuleContext<Table_row_itemContext>(i);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(SapParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(SapParserParser.WHITESPACE, i);
		}
		public Table_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_row; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterTable_row(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitTable_row(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_row(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_rowContext table_row() {
		Table_rowContext _localctx = new Table_rowContext(Context, State);
		EnterRule(_localctx, 6, RULE_table_row);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 158;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 154; table_row_item();
					}
					break;
				case WHITESPACE:
					{
					State = 155; Match(WHITESPACE);
					}
					break;
				case T__20:
					{
					State = 156; Match(T__20);
					State = 157; Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << WHITESPACE) | (1L << TEXT))) != 0) );
			State = 162; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_row_itemContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(SapParserParser.TEXT, 0); }
		public ITerminalNode EQUALS() { return GetToken(SapParserParser.EQUALS, 0); }
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public Table_row_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_row_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterTable_row_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitTable_row_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_row_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_row_itemContext table_row_item() {
		Table_row_itemContext _localctx = new Table_row_itemContext(Context, State);
		EnterRule(_localctx, 8, RULE_table_row_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(TEXT);
			State = 165; Match(EQUALS);
			State = 166; data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_footerContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(SapParserParser.NEWLINE, 0); }
		public ITerminalNode[] WHITESPACE() { return GetTokens(SapParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(SapParserParser.WHITESPACE, i);
		}
		public Table_footerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_footer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterTable_footer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitTable_footer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_footer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_footerContext table_footer() {
		Table_footerContext _localctx = new Table_footerContext(Context, State);
		EnterRule(_localctx, 10, RULE_table_footer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 168; Match(WHITESPACE);
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHITESPACE );
			State = 173; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataContext : ParserRuleContext {
		public DataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data; } }
	 
		public DataContext() { }
		public virtual void CopyFrom(DataContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntigerDataContext : DataContext {
		public ITerminalNode INTIGER() { return GetToken(SapParserParser.INTIGER, 0); }
		public IntigerDataContext(DataContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterIntigerData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitIntigerData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntigerData(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TextDataContext : DataContext {
		public ITerminalNode TEXT() { return GetToken(SapParserParser.TEXT, 0); }
		public TextDataContext(DataContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterTextData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitTextData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextData(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleQoutedTextDataContext : DataContext {
		public ITerminalNode DOUBLEQOUTEDTEXT() { return GetToken(SapParserParser.DOUBLEQOUTEDTEXT, 0); }
		public DoubleQoutedTextDataContext(DataContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterDoubleQoutedTextData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitDoubleQoutedTextData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleQoutedTextData(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleDataContext : DataContext {
		public ITerminalNode DOUBLE() { return GetToken(SapParserParser.DOUBLE, 0); }
		public DoubleDataContext(DataContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.EnterDoubleData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISapParserListener typedListener = listener as ISapParserListener;
			if (typedListener != null) typedListener.ExitDoubleData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISapParserVisitor<TResult> typedVisitor = visitor as ISapParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataContext data() {
		DataContext _localctx = new DataContext(Context, State);
		EnterRule(_localctx, 12, RULE_data);
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTIGER:
				_localctx = new IntigerDataContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 175; Match(INTIGER);
				}
				break;
			case DOUBLE:
				_localctx = new DoubleDataContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 176; Match(DOUBLE);
				}
				break;
			case TEXT:
				_localctx = new TextDataContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 177; Match(TEXT);
				}
				break;
			case DOUBLEQOUTEDTEXT:
				_localctx = new DoubleQoutedTextDataContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 178; Match(DOUBLEQOUTEDTEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1F', '\xB8', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\a', '\x2', '\x12', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x15', '\v', '\x2', '\x3', '\x2', '\x6', '\x2', '\x18', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x19', '\x3', '\x2', '\a', '\x2', '\x1D', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', ' ', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x85', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '\x88', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', '\x8C', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x8F', '\v', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x95', '\n', '\x3', '\x3', '\x4', '\a', '\x4', '\x98', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', '\x9B', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '\xA1', '\n', '\x5', '\r', '\x5', 
		'\xE', '\x5', '\xA2', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x6', '\a', '\xAC', '\n', 
		'\a', '\r', '\a', '\xE', '\a', '\xAD', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xB6', '\n', 
		'\b', '\x3', '\b', '\x2', '\x2', '\t', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x2', '\x3', '\x3', '\x2', '\x1B', '\x1D', '\x2', '\xD0', 
		'\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x4', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x99', '\x3', '\x2', '\x2', '\x2', '\b', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xE', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x12', '\t', '\x2', '\x2', '\x2', '\x11', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x13', '\x11', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x17', '\x3', '\x2', '\x2', '\x2', '\x15', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x18', '\x5', '\x4', '\x3', '\x2', 
		'\x17', '\x16', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', '\x1D', '\t', '\x2', '\x2', '\x2', '\x1C', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', ' ', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '!', '\x3', '\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '!', '\"', '\a', '\x2', '\x2', '\x3', '\"', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '#', '$', '\a', '\x3', '\x2', '\x2', '$', '%', '\a', '\x1C', 
		'\x2', '\x2', '%', '&', '\x5', '\x6', '\x4', '\x2', '&', '\'', '\x5', 
		'\f', '\a', '\x2', '\'', '\x95', '\x3', '\x2', '\x2', '\x2', '(', ')', 
		'\a', '\x4', '\x2', '\x2', ')', '*', '\a', '\x1C', '\x2', '\x2', '*', 
		'+', '\x5', '\x6', '\x4', '\x2', '+', ',', '\x5', '\f', '\a', '\x2', ',', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', '\x5', '\x2', '\x2', 
		'.', '/', '\a', '\x1C', '\x2', '\x2', '/', '\x30', '\x5', '\x6', '\x4', 
		'\x2', '\x30', '\x31', '\x5', '\f', '\a', '\x2', '\x31', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\a', '\x6', '\x2', '\x2', '\x33', 
		'\x34', '\a', '\x1C', '\x2', '\x2', '\x34', '\x35', '\x5', '\x6', '\x4', 
		'\x2', '\x35', '\x36', '\x5', '\f', '\a', '\x2', '\x36', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\a', '\x2', '\x2', '\x38', 
		'\x39', '\a', '\x1C', '\x2', '\x2', '\x39', ':', '\x5', '\x6', '\x4', 
		'\x2', ':', ';', '\x5', '\f', '\a', '\x2', ';', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\a', '\b', '\x2', '\x2', '=', '>', '\a', '\x1C', 
		'\x2', '\x2', '>', '?', '\x5', '\x6', '\x4', '\x2', '?', '@', '\x5', '\f', 
		'\a', '\x2', '@', '\x95', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\a', '\t', '\x2', '\x2', '\x42', '\x43', '\a', '\x1C', '\x2', '\x2', 
		'\x43', '\x44', '\x5', '\x6', '\x4', '\x2', '\x44', '\x45', '\x5', '\f', 
		'\a', '\x2', '\x45', '\x95', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\a', '\n', '\x2', '\x2', 'G', 'H', '\a', '\x1C', '\x2', '\x2', 'H', 'I', 
		'\x5', '\x6', '\x4', '\x2', 'I', 'J', '\x5', '\f', '\a', '\x2', 'J', '\x95', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\v', '\x2', '\x2', 'L', 'M', 
		'\a', '\x1C', '\x2', '\x2', 'M', 'N', '\x5', '\x6', '\x4', '\x2', 'N', 
		'O', '\x5', '\f', '\a', '\x2', 'O', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\a', '\f', '\x2', '\x2', 'Q', 'R', '\a', '\x1C', '\x2', '\x2', 
		'R', 'S', '\x5', '\x6', '\x4', '\x2', 'S', 'T', '\x5', '\f', '\a', '\x2', 
		'T', '\x95', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\r', '\x2', 
		'\x2', 'V', 'W', '\a', '\x1C', '\x2', '\x2', 'W', 'X', '\x5', '\x6', '\x4', 
		'\x2', 'X', 'Y', '\x5', '\f', '\a', '\x2', 'Y', '\x95', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '[', '\a', '\xE', '\x2', '\x2', '[', '\\', '\a', '\x1C', 
		'\x2', '\x2', '\\', ']', '\x5', '\x6', '\x4', '\x2', ']', '^', '\x5', 
		'\f', '\a', '\x2', '^', '\x95', '\x3', '\x2', '\x2', '\x2', '_', '`', 
		'\a', '\xF', '\x2', '\x2', '`', '\x61', '\a', '\x1C', '\x2', '\x2', '\x61', 
		'\x62', '\x5', '\x6', '\x4', '\x2', '\x62', '\x63', '\x5', '\f', '\a', 
		'\x2', '\x63', '\x95', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 
		'\x10', '\x2', '\x2', '\x65', '\x66', '\a', '\x1C', '\x2', '\x2', '\x66', 
		'g', '\x5', '\x6', '\x4', '\x2', 'g', 'h', '\x5', '\f', '\a', '\x2', 'h', 
		'\x95', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\x11', '\x2', '\x2', 
		'j', 'k', '\a', '\x1C', '\x2', '\x2', 'k', 'l', '\x5', '\x6', '\x4', '\x2', 
		'l', 'm', '\x5', '\f', '\a', '\x2', 'm', '\x95', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\a', '\x12', '\x2', '\x2', 'o', 'p', '\a', '\x1C', '\x2', 
		'\x2', 'p', 'q', '\x5', '\x6', '\x4', '\x2', 'q', 'r', '\x5', '\f', '\a', 
		'\x2', 'r', '\x95', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', '\x13', 
		'\x2', '\x2', 't', 'u', '\a', '\x1C', '\x2', '\x2', 'u', 'v', '\x5', '\x6', 
		'\x4', '\x2', 'v', 'w', '\x5', '\f', '\a', '\x2', 'w', '\x95', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'y', '\a', '\x14', '\x2', '\x2', 'y', 'z', '\a', 
		'\x1C', '\x2', '\x2', 'z', '{', '\x5', '\x6', '\x4', '\x2', '{', '|', 
		'\x5', '\f', '\a', '\x2', '|', '\x95', '\x3', '\x2', '\x2', '\x2', '}', 
		'~', '\a', '\x15', '\x2', '\x2', '~', '\x7F', '\a', '\x1C', '\x2', '\x2', 
		'\x7F', '\x80', '\x5', '\x6', '\x4', '\x2', '\x80', '\x81', '\x5', '\f', 
		'\a', '\x2', '\x81', '\x95', '\x3', '\x2', '\x2', '\x2', '\x82', '\x86', 
		'\a', '\x16', '\x2', '\x2', '\x83', '\x85', '\a', '\x1B', '\x2', '\x2', 
		'\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8D', '\a', '\x1E', 
		'\x2', '\x2', '\x8A', '\x8C', '\a', '\x1B', '\x2', '\x2', '\x8B', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', '\x1C', '\x2', '\x2', 
		'\x91', '\x92', '\x5', '\x6', '\x4', '\x2', '\x92', '\x93', '\x5', '\f', 
		'\a', '\x2', '\x93', '\x95', '\x3', '\x2', '\x2', '\x2', '\x94', '#', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '(', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x94', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x37', '\x3', '\x2', '\x2', '\x2', '\x94', '<', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x41', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x94', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x94', 'P', '\x3', '\x2', '\x2', '\x2', '\x94', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x94', 'Z', '\x3', '\x2', '\x2', '\x2', '\x94', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x64', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x94', 'n', '\x3', '\x2', '\x2', '\x2', 
		'\x94', 's', '\x3', '\x2', '\x2', '\x2', '\x94', 'x', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '}', '\x3', '\x2', '\x2', '\x2', '\x94', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x5', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x98', '\x5', '\b', '\x5', '\x2', '\x97', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\xA1', '\x5', '\n', '\x6', '\x2', '\x9D', '\xA1', '\a', 
		'\x1B', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x17', '\x2', '\x2', '\x9F', 
		'\xA1', '\a', '\x1C', '\x2', '\x2', '\xA0', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\a', 
		'\x1C', '\x2', '\x2', '\xA5', '\t', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA7', '\a', '\x1D', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x1A', '\x2', 
		'\x2', '\xA8', '\xA9', '\x5', '\xE', '\b', '\x2', '\xA9', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAC', '\a', '\x1B', '\x2', '\x2', '\xAB', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xB0', '\a', '\x1C', '\x2', '\x2', '\xB0', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB6', '\a', '\x18', '\x2', '\x2', '\xB2', '\xB6', '\a', 
		'\x19', '\x2', '\x2', '\xB3', '\xB6', '\a', '\x1D', '\x2', '\x2', '\xB4', 
		'\xB6', '\a', '\x1E', '\x2', '\x2', '\xB5', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\r', '\x13', '\x19', '\x1E', '\x86', 
		'\x8D', '\x94', '\x99', '\xA0', '\xA2', '\xAD', '\xB5',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
