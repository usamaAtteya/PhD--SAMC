//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from StaadParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class StaadParserParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, COMMENT=24, 
		INTIGER=25, DOUBLE=26, SEMICOLON=27, WHITESPACE=28, NEWLINE=29, NUMBER=30, 
		TEXT=31, ANY=32;
	public const int
		RULE_file = 0, RULE_section = 1, RULE_other = 2, RULE_load_inner_section = 3, 
		RULE_joint_load_section = 4, RULE_element_load_section = 5, RULE_member_load_section = 6, 
		RULE_joint_load_row = 7, RULE_newline_or_white_space = 8, RULE_generic_row = 9, 
		RULE_material_definition = 10, RULE_material_property = 11, RULE_semi_colon_separated_section_content = 12, 
		RULE_semi_colon_separated_row = 13, RULE_material_assignment_row = 14, 
		RULE_material_assignment_row_value = 15, RULE_section_definition_section_content = 16, 
		RULE_section_definition_row = 17, RULE_assignment_definition = 18, RULE_load_combination_row = 19, 
		RULE_load_combination_row_data = 20, RULE_id_definition_list = 21, RULE_id_definition = 22, 
		RULE_range = 23, RULE_row_data_separator = 24, RULE_data = 25;
	public static readonly string[] ruleNames = {
		"file", "section", "other", "load_inner_section", "joint_load_section", 
		"element_load_section", "member_load_section", "joint_load_row", "newline_or_white_space", 
		"generic_row", "material_definition", "material_property", "semi_colon_separated_section_content", 
		"semi_colon_separated_row", "material_assignment_row", "material_assignment_row_value", 
		"section_definition_section_content", "section_definition_row", "assignment_definition", 
		"load_combination_row", "load_combination_row_data", "id_definition_list", 
		"id_definition", "range", "row_data_separator", "data"
	};

	private static readonly string[] _LiteralNames = {
		null, "'UNIT'", "'JOINT COORDINATES'", "'MEMBER INCIDENCES'", "'ELEMENT INCIDENCES SHELL'", 
		"'DEFINE MATERIAL START'", "'END DEFINE MATERIAL'", "'ELEMENT PROPERTY'", 
		"'MEMBER PROPERTY'", "'CONSTANTS'", "'SUPPORTS'", "'LOAD'", "'LOAD COMB'", 
		"'JOINT LOAD'", "'ELEMENT LOAD'", "'MEMBER LOAD'", "'ISOTROPIC'", "'ALL'", 
		"'MEMB'", "'TO'", "'-'", "' AMERICAN'", "'MATERIAL'", "'BETA'", null, 
		null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"COMMENT", "INTIGER", "DOUBLE", "SEMICOLON", "WHITESPACE", "NEWLINE", 
		"NUMBER", "TEXT", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StaadParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static StaadParserParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StaadParserParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StaadParserParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(StaadParserParser.Eof, 0); }
		public ITerminalNode[] TEXT() { return GetTokens(StaadParserParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(StaadParserParser.TEXT, i);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(StaadParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(StaadParserParser.WHITESPACE, i);
		}
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public SectionContext[] section() {
			return GetRuleContexts<SectionContext>();
		}
		public SectionContext section(int i) {
			return GetRuleContext<SectionContext>(i);
		}
		public OtherContext[] other() {
			return GetRuleContexts<OtherContext>();
		}
		public OtherContext other(int i) {
			return GetRuleContext<OtherContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 55;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 52; Match(TEXT);
						}
						break;
					case 2:
						{
						State = 53; Match(WHITESPACE);
						}
						break;
					case 3:
						{
						State = 54; newline_or_white_space();
						}
						break;
					}
					} 
				}
				State = 59;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 62;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 62;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						State = 60; section();
						}
						break;
					case 2:
						{
						State = 61; other();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 64;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHITESPACE) | (1L << NEWLINE) | (1L << TEXT))) != 0)) {
				{
				State = 68;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 66; Match(TEXT);
					}
					break;
				case WHITESPACE:
				case NEWLINE:
					{
					State = 67; newline_or_white_space();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 73; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionContext : ParserRuleContext {
		public SectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section; } }
	 
		public SectionContext() { }
		public virtual void CopyFrom(SectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnitsSectionContext : SectionContext {
		public DataContext[] data() {
			return GetRuleContexts<DataContext>();
		}
		public DataContext data(int i) {
			return GetRuleContext<DataContext>(i);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(StaadParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(StaadParserParser.WHITESPACE, i);
		}
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public UnitsSectionContext(SectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterUnitsSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitUnitsSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnitsSection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AreaElementsSectionContext : SectionContext {
		public Semi_colon_separated_section_contentContext semi_colon_separated_section_content() {
			return GetRuleContext<Semi_colon_separated_section_contentContext>(0);
		}
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public AreaElementsSectionContext(SectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterAreaElementsSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitAreaElementsSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAreaElementsSection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoadComboSectionContext : SectionContext {
		public ITerminalNode INTIGER() { return GetToken(StaadParserParser.INTIGER, 0); }
		public ITerminalNode[] WHITESPACE() { return GetTokens(StaadParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(StaadParserParser.WHITESPACE, i);
		}
		public DataContext[] data() {
			return GetRuleContexts<DataContext>();
		}
		public DataContext data(int i) {
			return GetRuleContext<DataContext>(i);
		}
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public Load_combination_rowContext[] load_combination_row() {
			return GetRuleContexts<Load_combination_rowContext>();
		}
		public Load_combination_rowContext load_combination_row(int i) {
			return GetRuleContext<Load_combination_rowContext>(i);
		}
		public LoadComboSectionContext(SectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterLoadComboSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitLoadComboSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadComboSection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointsSectionContext : SectionContext {
		public Semi_colon_separated_section_contentContext semi_colon_separated_section_content() {
			return GetRuleContext<Semi_colon_separated_section_contentContext>(0);
		}
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public PointsSectionContext(SectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterPointsSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitPointsSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointsSection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FrameElementsSectionContext : SectionContext {
		public Semi_colon_separated_section_contentContext semi_colon_separated_section_content() {
			return GetRuleContext<Semi_colon_separated_section_contentContext>(0);
		}
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public FrameElementsSectionContext(SectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterFrameElementsSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitFrameElementsSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameElementsSection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FrameElementsSectionsSectionContext : SectionContext {
		public Section_definition_section_contentContext section_definition_section_content() {
			return GetRuleContext<Section_definition_section_contentContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(StaadParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(StaadParserParser.WHITESPACE, i);
		}
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(StaadParserParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(StaadParserParser.NEWLINE, i);
		}
		public FrameElementsSectionsSectionContext(SectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterFrameElementsSectionsSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitFrameElementsSectionsSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameElementsSectionsSection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaterialSectionContext : SectionContext {
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public Material_definitionContext[] material_definition() {
			return GetRuleContexts<Material_definitionContext>();
		}
		public Material_definitionContext material_definition(int i) {
			return GetRuleContext<Material_definitionContext>(i);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(StaadParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(StaadParserParser.WHITESPACE, i);
		}
		public MaterialSectionContext(SectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterMaterialSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitMaterialSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialSection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaterialAssignmentSectionContext : SectionContext {
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public Material_assignment_rowContext[] material_assignment_row() {
			return GetRuleContexts<Material_assignment_rowContext>();
		}
		public Material_assignment_rowContext material_assignment_row(int i) {
			return GetRuleContext<Material_assignment_rowContext>(i);
		}
		public MaterialAssignmentSectionContext(SectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterMaterialAssignmentSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitMaterialAssignmentSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialAssignmentSection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoundaryConditionsSectionContext : SectionContext {
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public Generic_rowContext[] generic_row() {
			return GetRuleContexts<Generic_rowContext>();
		}
		public Generic_rowContext generic_row(int i) {
			return GetRuleContext<Generic_rowContext>(i);
		}
		public BoundaryConditionsSectionContext(SectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterBoundaryConditionsSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitBoundaryConditionsSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoundaryConditionsSection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AreaElementsSectionsSectionContext : SectionContext {
		public Section_definition_section_contentContext section_definition_section_content() {
			return GetRuleContext<Section_definition_section_contentContext>(0);
		}
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public AreaElementsSectionsSectionContext(SectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterAreaElementsSectionsSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitAreaElementsSectionsSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAreaElementsSectionsSection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoadCaseSectionContext : SectionContext {
		public ITerminalNode INTIGER() { return GetToken(StaadParserParser.INTIGER, 0); }
		public ITerminalNode[] WHITESPACE() { return GetTokens(StaadParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(StaadParserParser.WHITESPACE, i);
		}
		public DataContext[] data() {
			return GetRuleContexts<DataContext>();
		}
		public DataContext data(int i) {
			return GetRuleContext<DataContext>(i);
		}
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public Load_inner_sectionContext[] load_inner_section() {
			return GetRuleContexts<Load_inner_sectionContext>();
		}
		public Load_inner_sectionContext load_inner_section(int i) {
			return GetRuleContext<Load_inner_sectionContext>(i);
		}
		public LoadCaseSectionContext(SectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterLoadCaseSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitLoadCaseSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadCaseSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionContext section() {
		SectionContext _localctx = new SectionContext(Context, State);
		EnterRule(_localctx, 2, RULE_section);
		int _la;
		try {
			int _alt;
			State = 237;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				_localctx = new UnitsSectionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 75; Match(T__0);
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 76; Match(WHITESPACE);
					}
					}
					State = 79;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHITESPACE );
				State = 81; data();
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 82; Match(WHITESPACE);
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHITESPACE );
				State = 87; data();
				State = 89;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 88; newline_or_white_space();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 91;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case T__1:
				_localctx = new PointsSectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 93; Match(T__1);
				State = 95;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 94; newline_or_white_space();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 97;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 99; semi_colon_separated_section_content();
				}
				break;
			case T__2:
				_localctx = new FrameElementsSectionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 101; Match(T__2);
				State = 103;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 102; newline_or_white_space();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 105;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 107; semi_colon_separated_section_content();
				}
				break;
			case T__3:
				_localctx = new AreaElementsSectionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 109; Match(T__3);
				State = 111;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 110; newline_or_white_space();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 113;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 115; semi_colon_separated_section_content();
				}
				break;
			case T__4:
				_localctx = new MaterialSectionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 117; Match(T__4);
				State = 119;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 118; newline_or_white_space();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 121;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 126;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 123; material_definition();
						}
						} 
					}
					State = 128;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 129;
						_la = TokenStream.LA(1);
						if ( !(_la==T__5 || _la==WHITESPACE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 132;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 135;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 134; newline_or_white_space();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 137;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case T__6:
				_localctx = new AreaElementsSectionsSectionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 139; Match(T__6);
				State = 141;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 140; newline_or_white_space();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 143;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 145; section_definition_section_content();
				}
				break;
			case T__7:
				_localctx = new FrameElementsSectionsSectionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 147; Match(T__7);
				State = 149;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 148; Match(WHITESPACE);
					}
					break;
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << INTIGER) | (1L << DOUBLE) | (1L << TEXT))) != 0)) {
					{
					State = 151; data();
					}
				}

				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHITESPACE) {
					{
					State = 154; Match(WHITESPACE);
					}
				}

				State = 158;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 157; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 160;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 162; section_definition_section_content();
				}
				break;
			case T__8:
				_localctx = new MaterialAssignmentSectionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 163; Match(T__8);
				State = 165;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 164; newline_or_white_space();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 167;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 169; material_assignment_row();
						}
						} 
					}
					State = 174;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				}
				break;
			case T__9:
				_localctx = new BoundaryConditionsSectionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 175; Match(T__9);
				State = 177;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 176; newline_or_white_space();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 179;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 184;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 181; generic_row();
						}
						} 
					}
					State = 186;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				}
				break;
			case T__10:
				_localctx = new LoadCaseSectionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 187; Match(T__10);
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WHITESPACE) {
					{
					{
					State = 188; Match(WHITESPACE);
					}
					}
					State = 193;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 194; Match(INTIGER);
				State = 197;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 197;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case T__0:
						case T__1:
						case T__2:
						case T__3:
						case T__4:
						case T__6:
						case T__7:
						case T__8:
						case T__9:
						case T__10:
						case T__11:
						case T__12:
						case T__13:
						case T__14:
						case T__16:
						case T__17:
						case T__18:
						case T__19:
						case T__20:
						case T__21:
						case T__22:
						case INTIGER:
						case DOUBLE:
						case TEXT:
							{
							State = 195; data();
							}
							break;
						case WHITESPACE:
							{
							State = 196; Match(WHITESPACE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 199;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 202;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 201; newline_or_white_space();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 204;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 206; load_inner_section();
						}
						} 
					}
					State = 211;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				}
				}
				break;
			case T__11:
				_localctx = new LoadComboSectionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 212; Match(T__11);
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 213; Match(WHITESPACE);
					}
					}
					State = 216;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHITESPACE );
				State = 218; Match(INTIGER);
				State = 219; Match(WHITESPACE);
				State = 222;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 222;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case T__0:
						case T__1:
						case T__2:
						case T__3:
						case T__4:
						case T__6:
						case T__7:
						case T__8:
						case T__9:
						case T__10:
						case T__11:
						case T__12:
						case T__13:
						case T__14:
						case T__16:
						case T__17:
						case T__18:
						case T__19:
						case T__20:
						case T__21:
						case T__22:
						case INTIGER:
						case DOUBLE:
						case TEXT:
							{
							State = 220; data();
							}
							break;
						case WHITESPACE:
							{
							State = 221; Match(WHITESPACE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 224;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 227;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 226; newline_or_white_space();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 229;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 234;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 231; load_combination_row();
						}
						} 
					}
					State = 236;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherContext : ParserRuleContext {
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public Newline_or_white_spaceContext newline_or_white_space() {
			return GetRuleContext<Newline_or_white_spaceContext>(0);
		}
		public OtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterOther(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitOther(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherContext other() {
		OtherContext _localctx = new OtherContext(Context, State);
		EnterRule(_localctx, 4, RULE_other);
		try {
			State = 241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case INTIGER:
			case DOUBLE:
			case TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239; data();
				}
				break;
			case WHITESPACE:
			case NEWLINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; newline_or_white_space();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Load_inner_sectionContext : ParserRuleContext {
		public Joint_load_sectionContext joint_load_section() {
			return GetRuleContext<Joint_load_sectionContext>(0);
		}
		public Element_load_sectionContext element_load_section() {
			return GetRuleContext<Element_load_sectionContext>(0);
		}
		public Member_load_sectionContext member_load_section() {
			return GetRuleContext<Member_load_sectionContext>(0);
		}
		public Load_inner_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load_inner_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterLoad_inner_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitLoad_inner_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoad_inner_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Load_inner_sectionContext load_inner_section() {
		Load_inner_sectionContext _localctx = new Load_inner_sectionContext(Context, State);
		EnterRule(_localctx, 6, RULE_load_inner_section);
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243; joint_load_section();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244; element_load_section();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 3);
				{
				State = 245; member_load_section();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Joint_load_sectionContext : ParserRuleContext {
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public Joint_load_rowContext[] joint_load_row() {
			return GetRuleContexts<Joint_load_rowContext>();
		}
		public Joint_load_rowContext joint_load_row(int i) {
			return GetRuleContext<Joint_load_rowContext>(i);
		}
		public Joint_load_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joint_load_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterJoint_load_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitJoint_load_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoint_load_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Joint_load_sectionContext joint_load_section() {
		Joint_load_sectionContext _localctx = new Joint_load_sectionContext(Context, State);
		EnterRule(_localctx, 8, RULE_joint_load_section);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(T__12);
			State = 250;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 249; newline_or_white_space();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 252;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 258;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 256;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						State = 254; joint_load_row();
						}
						break;
					case 2:
						{
						State = 255; newline_or_white_space();
						}
						break;
					}
					} 
				}
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_load_sectionContext : ParserRuleContext {
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public Generic_rowContext[] generic_row() {
			return GetRuleContexts<Generic_rowContext>();
		}
		public Generic_rowContext generic_row(int i) {
			return GetRuleContext<Generic_rowContext>(i);
		}
		public Element_load_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_load_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterElement_load_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitElement_load_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_load_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_load_sectionContext element_load_section() {
		Element_load_sectionContext _localctx = new Element_load_sectionContext(Context, State);
		EnterRule(_localctx, 10, RULE_element_load_section);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(T__13);
			State = 263;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 262; newline_or_white_space();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 265;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 270;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 267; generic_row();
					}
					} 
				}
				State = 272;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_load_sectionContext : ParserRuleContext {
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public Generic_rowContext[] generic_row() {
			return GetRuleContexts<Generic_rowContext>();
		}
		public Generic_rowContext generic_row(int i) {
			return GetRuleContext<Generic_rowContext>(i);
		}
		public Member_load_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_load_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterMember_load_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitMember_load_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_load_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_load_sectionContext member_load_section() {
		Member_load_sectionContext _localctx = new Member_load_sectionContext(Context, State);
		EnterRule(_localctx, 12, RULE_member_load_section);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(T__14);
			State = 275;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 274; newline_or_white_space();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 277;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 282;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 279; generic_row();
					}
					} 
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Joint_load_rowContext : ParserRuleContext {
		public Id_definition_listContext id_definition_list() {
			return GetRuleContext<Id_definition_listContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(StaadParserParser.NEWLINE, 0); }
		public DataContext[] data() {
			return GetRuleContexts<DataContext>();
		}
		public DataContext data(int i) {
			return GetRuleContext<DataContext>(i);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(StaadParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(StaadParserParser.WHITESPACE, i);
		}
		public Joint_load_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joint_load_row; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterJoint_load_row(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitJoint_load_row(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoint_load_row(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Joint_load_rowContext joint_load_row() {
		Joint_load_rowContext _localctx = new Joint_load_rowContext(Context, State);
		EnterRule(_localctx, 14, RULE_joint_load_row);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; id_definition_list();
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 288;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case T__1:
				case T__2:
				case T__3:
				case T__4:
				case T__6:
				case T__7:
				case T__8:
				case T__9:
				case T__10:
				case T__11:
				case T__12:
				case T__13:
				case T__14:
				case T__16:
				case T__17:
				case T__18:
				case T__19:
				case T__20:
				case T__21:
				case T__22:
				case INTIGER:
				case DOUBLE:
				case TEXT:
					{
					State = 286; data();
					}
					break;
				case WHITESPACE:
					{
					State = 287; Match(WHITESPACE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << INTIGER) | (1L << DOUBLE) | (1L << WHITESPACE) | (1L << TEXT))) != 0) );
			State = 292; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Newline_or_white_spaceContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(StaadParserParser.NEWLINE, 0); }
		public ITerminalNode WHITESPACE() { return GetToken(StaadParserParser.WHITESPACE, 0); }
		public Newline_or_white_spaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline_or_white_space; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterNewline_or_white_space(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitNewline_or_white_space(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline_or_white_space(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Newline_or_white_spaceContext newline_or_white_space() {
		Newline_or_white_spaceContext _localctx = new Newline_or_white_spaceContext(Context, State);
		EnterRule(_localctx, 16, RULE_newline_or_white_space);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			_la = TokenStream.LA(1);
			if ( !(_la==WHITESPACE || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_rowContext : ParserRuleContext {
		public Id_definition_listContext id_definition_list() {
			return GetRuleContext<Id_definition_listContext>(0);
		}
		public Assignment_definitionContext assignment_definition() {
			return GetRuleContext<Assignment_definitionContext>(0);
		}
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public Generic_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_row; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterGeneric_row(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitGeneric_row(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_row(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_rowContext generic_row() {
		Generic_rowContext _localctx = new Generic_rowContext(Context, State);
		EnterRule(_localctx, 18, RULE_generic_row);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; id_definition_list();
			State = 297; assignment_definition();
			State = 299;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 298; newline_or_white_space();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Material_definitionContext : ParserRuleContext {
		public ITerminalNode[] WHITESPACE() { return GetTokens(StaadParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(StaadParserParser.WHITESPACE, i);
		}
		public DataContext[] data() {
			return GetRuleContexts<DataContext>();
		}
		public DataContext data(int i) {
			return GetRuleContext<DataContext>(i);
		}
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public Material_propertyContext[] material_property() {
			return GetRuleContexts<Material_propertyContext>();
		}
		public Material_propertyContext material_property(int i) {
			return GetRuleContext<Material_propertyContext>(i);
		}
		public Material_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_material_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterMaterial_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitMaterial_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterial_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Material_definitionContext material_definition() {
		Material_definitionContext _localctx = new Material_definitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_material_definition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHITESPACE) {
				{
				{
				State = 303; Match(WHITESPACE);
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 309; Match(T__15);
			State = 312;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 312;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__0:
					case T__1:
					case T__2:
					case T__3:
					case T__4:
					case T__6:
					case T__7:
					case T__8:
					case T__9:
					case T__10:
					case T__11:
					case T__12:
					case T__13:
					case T__14:
					case T__16:
					case T__17:
					case T__18:
					case T__19:
					case T__20:
					case T__21:
					case T__22:
					case INTIGER:
					case DOUBLE:
					case TEXT:
						{
						State = 310; data();
						}
						break;
					case WHITESPACE:
						{
						State = 311; Match(WHITESPACE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 314;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 317;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 316; newline_or_white_space();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 319;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 324;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 321; material_property();
					}
					} 
				}
				State = 326;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Material_propertyContext : ParserRuleContext {
		public Newline_or_white_spaceContext newline_or_white_space() {
			return GetRuleContext<Newline_or_white_spaceContext>(0);
		}
		public DataContext[] data() {
			return GetRuleContexts<DataContext>();
		}
		public DataContext data(int i) {
			return GetRuleContext<DataContext>(i);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(StaadParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(StaadParserParser.WHITESPACE, i);
		}
		public Material_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_material_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterMaterial_property(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitMaterial_property(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterial_property(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Material_propertyContext material_property() {
		Material_propertyContext _localctx = new Material_propertyContext(Context, State);
		EnterRule(_localctx, 22, RULE_material_property);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 329;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__0:
					case T__1:
					case T__2:
					case T__3:
					case T__4:
					case T__6:
					case T__7:
					case T__8:
					case T__9:
					case T__10:
					case T__11:
					case T__12:
					case T__13:
					case T__14:
					case T__16:
					case T__17:
					case T__18:
					case T__19:
					case T__20:
					case T__21:
					case T__22:
					case INTIGER:
					case DOUBLE:
					case TEXT:
						{
						State = 327; data();
						}
						break;
					case WHITESPACE:
						{
						State = 328; Match(WHITESPACE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 331;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 333; newline_or_white_space();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Semi_colon_separated_section_contentContext : ParserRuleContext {
		public Semi_colon_separated_rowContext[] semi_colon_separated_row() {
			return GetRuleContexts<Semi_colon_separated_rowContext>();
		}
		public Semi_colon_separated_rowContext semi_colon_separated_row(int i) {
			return GetRuleContext<Semi_colon_separated_rowContext>(i);
		}
		public Newline_or_white_spaceContext[] newline_or_white_space() {
			return GetRuleContexts<Newline_or_white_spaceContext>();
		}
		public Newline_or_white_spaceContext newline_or_white_space(int i) {
			return GetRuleContext<Newline_or_white_spaceContext>(i);
		}
		public Semi_colon_separated_section_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semi_colon_separated_section_content; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterSemi_colon_separated_section_content(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitSemi_colon_separated_section_content(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemi_colon_separated_section_content(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Semi_colon_separated_section_contentContext semi_colon_separated_section_content() {
		Semi_colon_separated_section_contentContext _localctx = new Semi_colon_separated_section_contentContext(Context, State);
		EnterRule(_localctx, 24, RULE_semi_colon_separated_section_content);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 337;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
					case 1:
						{
						State = 335; semi_colon_separated_row();
						}
						break;
					case 2:
						{
						State = 336; newline_or_white_space();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 339;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Semi_colon_separated_rowContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(StaadParserParser.SEMICOLON, 0); }
		public DataContext[] data() {
			return GetRuleContexts<DataContext>();
		}
		public DataContext data(int i) {
			return GetRuleContext<DataContext>(i);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(StaadParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(StaadParserParser.WHITESPACE, i);
		}
		public Semi_colon_separated_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semi_colon_separated_row; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterSemi_colon_separated_row(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitSemi_colon_separated_row(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemi_colon_separated_row(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Semi_colon_separated_rowContext semi_colon_separated_row() {
		Semi_colon_separated_rowContext _localctx = new Semi_colon_separated_rowContext(Context, State);
		EnterRule(_localctx, 26, RULE_semi_colon_separated_row);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 343;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case T__1:
				case T__2:
				case T__3:
				case T__4:
				case T__6:
				case T__7:
				case T__8:
				case T__9:
				case T__10:
				case T__11:
				case T__12:
				case T__13:
				case T__14:
				case T__16:
				case T__17:
				case T__18:
				case T__19:
				case T__20:
				case T__21:
				case T__22:
				case INTIGER:
				case DOUBLE:
				case TEXT:
					{
					State = 341; data();
					}
					break;
				case WHITESPACE:
					{
					State = 342; Match(WHITESPACE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << INTIGER) | (1L << DOUBLE) | (1L << WHITESPACE) | (1L << TEXT))) != 0) );
			State = 347; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Material_assignment_rowContext : ParserRuleContext {
		public DataContext[] data() {
			return GetRuleContexts<DataContext>();
		}
		public DataContext data(int i) {
			return GetRuleContext<DataContext>(i);
		}
		public Material_assignment_row_valueContext material_assignment_row_value() {
			return GetRuleContext<Material_assignment_row_valueContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(StaadParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(StaadParserParser.WHITESPACE, i);
		}
		public Material_assignment_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_material_assignment_row; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterMaterial_assignment_row(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitMaterial_assignment_row(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterial_assignment_row(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Material_assignment_rowContext material_assignment_row() {
		Material_assignment_rowContext _localctx = new Material_assignment_rowContext(Context, State);
		EnterRule(_localctx, 28, RULE_material_assignment_row);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHITESPACE) {
				{
				{
				State = 349; Match(WHITESPACE);
				}
				}
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 355; data();
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 356; Match(WHITESPACE);
				}
				}
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHITESPACE );
			State = 361; data();
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 362; Match(WHITESPACE);
				}
				}
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHITESPACE );
			State = 367; material_assignment_row_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Material_assignment_row_valueContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(StaadParserParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(StaadParserParser.NEWLINE, i);
		}
		public Id_definition_listContext id_definition_list() {
			return GetRuleContext<Id_definition_listContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(StaadParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(StaadParserParser.WHITESPACE, i);
		}
		public Material_assignment_row_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_material_assignment_row_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterMaterial_assignment_row_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitMaterial_assignment_row_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterial_assignment_row_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Material_assignment_row_valueContext material_assignment_row_value() {
		Material_assignment_row_valueContext _localctx = new Material_assignment_row_valueContext(Context, State);
		EnterRule(_localctx, 30, RULE_material_assignment_row_value);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				{
				State = 369; Match(T__16);
				}
				break;
			case T__17:
				{
				{
				State = 370; Match(T__17);
				State = 374;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 371; Match(WHITESPACE);
						}
						} 
					}
					State = 376;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				}
				State = 377; id_definition_list();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 381;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 380; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 383;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Section_definition_section_contentContext : ParserRuleContext {
		public Section_definition_rowContext[] section_definition_row() {
			return GetRuleContexts<Section_definition_rowContext>();
		}
		public Section_definition_rowContext section_definition_row(int i) {
			return GetRuleContext<Section_definition_rowContext>(i);
		}
		public Section_definition_section_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section_definition_section_content; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterSection_definition_section_content(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitSection_definition_section_content(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSection_definition_section_content(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Section_definition_section_contentContext section_definition_section_content() {
		Section_definition_section_contentContext _localctx = new Section_definition_section_contentContext(Context, State);
		EnterRule(_localctx, 32, RULE_section_definition_section_content);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 385; section_definition_row();
					}
					} 
				}
				State = 390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Section_definition_rowContext : ParserRuleContext {
		public Id_definition_listContext id_definition_list() {
			return GetRuleContext<Id_definition_listContext>(0);
		}
		public Assignment_definitionContext assignment_definition() {
			return GetRuleContext<Assignment_definitionContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(StaadParserParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(StaadParserParser.NEWLINE, i);
		}
		public Section_definition_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section_definition_row; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterSection_definition_row(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitSection_definition_row(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSection_definition_row(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Section_definition_rowContext section_definition_row() {
		Section_definition_rowContext _localctx = new Section_definition_rowContext(Context, State);
		EnterRule(_localctx, 34, RULE_section_definition_row);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; id_definition_list();
			State = 392; assignment_definition();
			State = 394;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 393; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 396;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_definitionContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(StaadParserParser.TEXT, 0); }
		public DataContext[] data() {
			return GetRuleContexts<DataContext>();
		}
		public DataContext data(int i) {
			return GetRuleContext<DataContext>(i);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(StaadParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(StaadParserParser.WHITESPACE, i);
		}
		public Assignment_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterAssignment_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitAssignment_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_definitionContext assignment_definition() {
		Assignment_definitionContext _localctx = new Assignment_definitionContext(Context, State);
		EnterRule(_localctx, 36, RULE_assignment_definition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(TEXT);
			State = 403;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 401;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__0:
					case T__1:
					case T__2:
					case T__3:
					case T__4:
					case T__6:
					case T__7:
					case T__8:
					case T__9:
					case T__10:
					case T__11:
					case T__12:
					case T__13:
					case T__14:
					case T__16:
					case T__17:
					case T__18:
					case T__19:
					case T__20:
					case T__21:
					case T__22:
					case INTIGER:
					case DOUBLE:
					case TEXT:
						{
						State = 399; data();
						}
						break;
					case WHITESPACE:
						{
						State = 400; Match(WHITESPACE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 405;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Load_combination_rowContext : ParserRuleContext {
		public Load_combination_row_dataContext[] load_combination_row_data() {
			return GetRuleContexts<Load_combination_row_dataContext>();
		}
		public Load_combination_row_dataContext load_combination_row_data(int i) {
			return GetRuleContext<Load_combination_row_dataContext>(i);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(StaadParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(StaadParserParser.WHITESPACE, i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(StaadParserParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(StaadParserParser.NEWLINE, i);
		}
		public Load_combination_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load_combination_row; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterLoad_combination_row(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitLoad_combination_row(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoad_combination_row(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Load_combination_rowContext load_combination_row() {
		Load_combination_rowContext _localctx = new Load_combination_rowContext(Context, State);
		EnterRule(_localctx, 38, RULE_load_combination_row);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 408;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INTIGER:
				case DOUBLE:
					{
					State = 406; load_combination_row_data();
					}
					break;
				case WHITESPACE:
					{
					State = 407; Match(WHITESPACE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTIGER) | (1L << DOUBLE) | (1L << WHITESPACE))) != 0) );
			State = 413;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 412; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 415;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Load_combination_row_dataContext : ParserRuleContext {
		public ITerminalNode INTIGER() { return GetToken(StaadParserParser.INTIGER, 0); }
		public ITerminalNode DOUBLE() { return GetToken(StaadParserParser.DOUBLE, 0); }
		public Load_combination_row_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load_combination_row_data; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterLoad_combination_row_data(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitLoad_combination_row_data(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoad_combination_row_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Load_combination_row_dataContext load_combination_row_data() {
		Load_combination_row_dataContext _localctx = new Load_combination_row_dataContext(Context, State);
		EnterRule(_localctx, 40, RULE_load_combination_row_data);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			_la = TokenStream.LA(1);
			if ( !(_la==INTIGER || _la==DOUBLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_definition_listContext : ParserRuleContext {
		public Id_definition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_definition_list; } }
	 
		public Id_definition_listContext() { }
		public virtual void CopyFrom(Id_definition_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdDefinitionListContext : Id_definition_listContext {
		public Id_definitionContext[] id_definition() {
			return GetRuleContexts<Id_definitionContext>();
		}
		public Id_definitionContext id_definition(int i) {
			return GetRuleContext<Id_definitionContext>(i);
		}
		public Row_data_separatorContext[] row_data_separator() {
			return GetRuleContexts<Row_data_separatorContext>();
		}
		public Row_data_separatorContext row_data_separator(int i) {
			return GetRuleContext<Row_data_separatorContext>(i);
		}
		public IdDefinitionListContext(Id_definition_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterIdDefinitionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitIdDefinitionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Id_definition_listContext id_definition_list() {
		Id_definition_listContext _localctx = new Id_definition_listContext(Context, State);
		EnterRule(_localctx, 42, RULE_id_definition_list);
		try {
			int _alt;
			_localctx = new IdDefinitionListContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 421;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INTIGER:
						{
						State = 419; id_definition();
						}
						break;
					case T__19:
					case WHITESPACE:
						{
						State = 420; row_data_separator();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 423;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_definitionContext : ParserRuleContext {
		public Id_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_definition; } }
	 
		public Id_definitionContext() { }
		public virtual void CopyFrom(Id_definitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntigerIdContext : Id_definitionContext {
		public ITerminalNode INTIGER() { return GetToken(StaadParserParser.INTIGER, 0); }
		public IntigerIdContext(Id_definitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterIntigerId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitIntigerId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntigerId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeOfIdsContext : Id_definitionContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public RangeOfIdsContext(Id_definitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterRangeOfIds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitRangeOfIds(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeOfIds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Id_definitionContext id_definition() {
		Id_definitionContext _localctx = new Id_definitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_id_definition);
		try {
			State = 427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				_localctx = new IntigerIdContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 425; Match(INTIGER);
				}
				break;
			case 2:
				_localctx = new RangeOfIdsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 426; range();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode[] INTIGER() { return GetTokens(StaadParserParser.INTIGER); }
		public ITerminalNode INTIGER(int i) {
			return GetToken(StaadParserParser.INTIGER, i);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(StaadParserParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(StaadParserParser.WHITESPACE, i);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 46, RULE_range);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429; Match(INTIGER);
			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHITESPACE) {
				{
				{
				State = 430; Match(WHITESPACE);
				}
				}
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 436; Match(T__18);
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHITESPACE) {
				{
				{
				State = 437; Match(WHITESPACE);
				}
				}
				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 443; Match(INTIGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_data_separatorContext : ParserRuleContext {
		public ITerminalNode WHITESPACE() { return GetToken(StaadParserParser.WHITESPACE, 0); }
		public ITerminalNode NEWLINE() { return GetToken(StaadParserParser.NEWLINE, 0); }
		public Row_data_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_data_separator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterRow_data_separator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitRow_data_separator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow_data_separator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Row_data_separatorContext row_data_separator() {
		Row_data_separatorContext _localctx = new Row_data_separatorContext(Context, State);
		EnterRule(_localctx, 48, RULE_row_data_separator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHITESPACE:
				{
				State = 445; Match(WHITESPACE);
				}
				break;
			case T__19:
				{
				State = 446; Match(T__19);
				State = 447; Match(NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataContext : ParserRuleContext {
		public DataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data; } }
	 
		public DataContext() { }
		public virtual void CopyFrom(DataContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntigerDataContext : DataContext {
		public ITerminalNode INTIGER() { return GetToken(StaadParserParser.INTIGER, 0); }
		public IntigerDataContext(DataContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterIntigerData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitIntigerData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntigerData(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TextDataContext : DataContext {
		public ITerminalNode TEXT() { return GetToken(StaadParserParser.TEXT, 0); }
		public TextDataContext(DataContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterTextData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitTextData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextData(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoadHeaderDataContext : DataContext {
		public LoadHeaderDataContext(DataContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterLoadHeaderData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitLoadHeaderData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadHeaderData(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleDataContext : DataContext {
		public ITerminalNode DOUBLE() { return GetToken(StaadParserParser.DOUBLE, 0); }
		public DoubleDataContext(DataContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.EnterDoubleData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStaadParserListener typedListener = listener as IStaadParserListener;
			if (typedListener != null) typedListener.ExitDoubleData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStaadParserVisitor<TResult> typedVisitor = visitor as IStaadParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataContext data() {
		DataContext _localctx = new DataContext(Context, State);
		EnterRule(_localctx, 50, RULE_data);
		try {
			State = 474;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 450; Match(T__10);
				}
				break;
			case T__11:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 451; Match(T__11);
				}
				break;
			case T__9:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 452; Match(T__9);
				}
				break;
			case T__8:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 453; Match(T__8);
				}
				break;
			case T__7:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 454; Match(T__7);
				}
				break;
			case T__20:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 455; Match(T__20);
				}
				break;
			case T__6:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 456; Match(T__6);
				}
				break;
			case T__4:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 457; Match(T__4);
				}
				break;
			case T__3:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 458; Match(T__3);
				}
				break;
			case T__2:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 459; Match(T__2);
				}
				break;
			case T__1:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 460; Match(T__1);
				}
				break;
			case T__0:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 461; Match(T__0);
				}
				break;
			case T__16:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 462; Match(T__16);
				}
				break;
			case T__17:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 463; Match(T__17);
				}
				break;
			case T__12:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 464; Match(T__12);
				}
				break;
			case T__13:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 465; Match(T__13);
				}
				break;
			case T__14:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 466; Match(T__14);
				}
				break;
			case T__21:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 467; Match(T__21);
				}
				break;
			case T__22:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 468; Match(T__22);
				}
				break;
			case T__19:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 469; Match(T__19);
				}
				break;
			case T__18:
				_localctx = new LoadHeaderDataContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 470; Match(T__18);
				}
				break;
			case INTIGER:
				_localctx = new IntigerDataContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 471; Match(INTIGER);
				}
				break;
			case DOUBLE:
				_localctx = new DoubleDataContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 472; Match(DOUBLE);
				}
				break;
			case TEXT:
				_localctx = new TextDataContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 473; Match(TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\x1DF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', 
		'\x2', ':', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '=', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '\x41', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', '\x42', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'G', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', 'J', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', 'P', '\n', '\x3', '\r', 
		'\x3', '\xE', '\x3', 'Q', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', 'V', 
		'\n', '\x3', '\r', '\x3', '\xE', '\x3', 'W', '\x3', '\x3', '\x3', '\x3', 
		'\x6', '\x3', '\\', '\n', '\x3', '\r', '\x3', '\xE', '\x3', ']', '\x3', 
		'\x3', '\x3', '\x3', '\x6', '\x3', '\x62', '\n', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\x63', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x6', '\x3', 'j', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 'k', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', 'r', '\n', 
		'\x3', '\r', '\x3', '\xE', '\x3', 's', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x6', '\x3', 'z', '\n', '\x3', '\r', '\x3', '\xE', 
		'\x3', '{', '\x3', '\x3', '\a', '\x3', '\x7F', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\x82', '\v', '\x3', '\x3', '\x3', '\x6', '\x3', '\x85', 
		'\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x86', '\x3', '\x3', '\x6', '\x3', 
		'\x8A', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x8B', '\x3', '\x3', 
		'\x3', '\x3', '\x6', '\x3', '\x90', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\x91', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x98', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\x9B', '\n', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x9E', '\n', '\x3', '\x3', '\x3', 
		'\x6', '\x3', '\xA1', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\xA2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '\xA8', '\n', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xA9', '\x3', '\x3', '\a', '\x3', '\xAD', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\xB0', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x6', '\x3', '\xB4', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xB5', '\x3', '\x3', '\a', '\x3', '\xB9', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\xBC', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\xC0', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\xC3', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '\xC8', '\n', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xC9', '\x3', '\x3', '\x6', '\x3', '\xCD', '\n', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xCE', '\x3', '\x3', '\a', '\x3', '\xD2', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\xD5', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x6', '\x3', '\xD9', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xDA', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', 
		'\x3', '\xE1', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\xE2', '\x3', 
		'\x3', '\x6', '\x3', '\xE6', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\xE7', 
		'\x3', '\x3', '\a', '\x3', '\xEB', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\xEE', '\v', '\x3', '\x5', '\x3', '\xF0', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\xF4', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\xF9', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x6', '\x6', '\xFD', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 
		'\xFE', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x103', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '\x106', '\v', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x6', '\a', '\x10A', '\n', '\a', '\r', '\a', '\xE', '\a', '\x10B', '\x3', 
		'\a', '\a', '\a', '\x10F', '\n', '\a', '\f', '\a', '\xE', '\a', '\x112', 
		'\v', '\a', '\x3', '\b', '\x3', '\b', '\x6', '\b', '\x116', '\n', '\b', 
		'\r', '\b', '\xE', '\b', '\x117', '\x3', '\b', '\a', '\b', '\x11B', '\n', 
		'\b', '\f', '\b', '\xE', '\b', '\x11E', '\v', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x6', '\t', '\x123', '\n', '\t', '\r', '\t', '\xE', 
		'\t', '\x124', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x6', '\v', '\x12E', '\n', '\v', '\r', 
		'\v', '\xE', '\v', '\x12F', '\x3', '\f', '\a', '\f', '\x133', '\n', '\f', 
		'\f', '\f', '\xE', '\f', '\x136', '\v', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x6', '\f', '\x13B', '\n', '\f', '\r', '\f', '\xE', '\f', 
		'\x13C', '\x3', '\f', '\x6', '\f', '\x140', '\n', '\f', '\r', '\f', '\xE', 
		'\f', '\x141', '\x3', '\f', '\a', '\f', '\x145', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\x148', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x6', '\r', 
		'\x14C', '\n', '\r', '\r', '\r', '\xE', '\r', '\x14D', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x6', '\xE', '\x154', '\n', '\xE', 
		'\r', '\xE', '\xE', '\xE', '\x155', '\x3', '\xF', '\x3', '\xF', '\x6', 
		'\xF', '\x15A', '\n', '\xF', '\r', '\xF', '\xE', '\xF', '\x15B', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\a', '\x10', '\x161', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', '\x164', '\v', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x6', '\x10', '\x168', '\n', '\x10', '\r', '\x10', '\xE', '\x10', 
		'\x169', '\x3', '\x10', '\x3', '\x10', '\x6', '\x10', '\x16E', '\n', '\x10', 
		'\r', '\x10', '\xE', '\x10', '\x16F', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x177', '\n', '\x11', 
		'\f', '\x11', '\xE', '\x11', '\x17A', '\v', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x17D', '\n', '\x11', '\x3', '\x11', '\x6', '\x11', '\x180', 
		'\n', '\x11', '\r', '\x11', '\xE', '\x11', '\x181', '\x3', '\x12', '\a', 
		'\x12', '\x185', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x188', '\v', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x6', '\x13', '\x18D', 
		'\n', '\x13', '\r', '\x13', '\xE', '\x13', '\x18E', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\a', '\x14', '\x194', '\n', '\x14', '\f', '\x14', 
		'\xE', '\x14', '\x197', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x6', 
		'\x15', '\x19B', '\n', '\x15', '\r', '\x15', '\xE', '\x15', '\x19C', '\x3', 
		'\x15', '\x6', '\x15', '\x1A0', '\n', '\x15', '\r', '\x15', '\xE', '\x15', 
		'\x1A1', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x6', 
		'\x17', '\x1A8', '\n', '\x17', '\r', '\x17', '\xE', '\x17', '\x1A9', '\x3', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x1AE', '\n', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\a', '\x19', '\x1B2', '\n', '\x19', '\f', '\x19', '\xE', 
		'\x19', '\x1B5', '\v', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', 
		'\x1B9', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x1BC', '\v', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x1C3', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x1DD', '\n', '\x1B', '\x3', '\x1B', 
		'\x2', '\x2', '\x1C', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x2', '\x5', '\x4', 
		'\x2', '\b', '\b', '\x1E', '\x1E', '\x3', '\x2', '\x1E', '\x1F', '\x3', 
		'\x2', '\x1B', '\x1C', '\x2', '\x234', '\x2', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x6', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\xF8', '\x3', '\x2', '\x2', '\x2', '\n', '\xFA', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x113', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11F', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x128', '\x3', '\x2', '\x2', '\x2', '\x14', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x153', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x159', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x162', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x17C', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x186', '\x3', '\x2', '\x2', '\x2', '$', '\x189', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x190', '\x3', '\x2', '\x2', '\x2', '(', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x1A3', '\x3', '\x2', '\x2', '\x2', 
		',', '\x1A7', '\x3', '\x2', '\x2', '\x2', '.', '\x1AD', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x32', '\x1C2', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
		'\x36', ':', '\a', '!', '\x2', '\x2', '\x37', ':', '\a', '\x1E', '\x2', 
		'\x2', '\x38', ':', '\x5', '\x12', '\n', '\x2', '\x39', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'\x38', '\x3', '\x2', '\x2', '\x2', ':', '=', '\x3', '\x2', '\x2', '\x2', 
		';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', 
		'\x2', '<', '@', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x41', '\x5', '\x4', '\x3', '\x2', '?', '\x41', '\x5', '\x6', 
		'\x4', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '@', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x43', 'H', '\x3', '\x2', '\x2', '\x2', '\x44', 'G', '\a', '!', '\x2', 
		'\x2', '\x45', 'G', '\x5', '\x12', '\n', '\x2', '\x46', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 
		'J', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\x3', '\x2', '\x2', '\x2', 
		'J', 'H', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\x2', '\x2', '\x3', 
		'L', '\x3', '\x3', '\x2', '\x2', '\x2', 'M', 'O', '\a', '\x3', '\x2', 
		'\x2', 'N', 'P', '\a', '\x1E', '\x2', '\x2', 'O', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'U', '\x5', '\x34', '\x1B', '\x2', 'T', 'V', '\a', '\x1E', 
		'\x2', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '[', '\x5', '\x34', 
		'\x1B', '\x2', 'Z', '\\', '\x5', '\x12', '\n', '\x2', '[', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '[', 
		'\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '_', '\x61', '\a', '\x4', '\x2', '\x2', 
		'`', '\x62', '\x5', '\x12', '\n', '\x2', '\x61', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x5', '\x1A', '\xE', 
		'\x2', '\x66', '\xF0', '\x3', '\x2', '\x2', '\x2', 'g', 'i', '\a', '\x5', 
		'\x2', '\x2', 'h', 'j', '\x5', '\x12', '\n', '\x2', 'i', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'n', '\x5', '\x1A', '\xE', '\x2', 'n', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'q', '\a', '\x6', '\x2', '\x2', 'p', 'r', '\x5', 
		'\x12', '\n', '\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', 
		'\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', 
		'\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x5', 
		'\x1A', '\xE', '\x2', 'v', '\xF0', '\x3', '\x2', '\x2', '\x2', 'w', 'y', 
		'\a', '\a', '\x2', '\x2', 'x', 'z', '\x5', '\x12', '\n', '\x2', 'y', 'x', 
		'\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', 
		'y', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x80', '\x3', '\x2', '\x2', '\x2', '}', '\x7F', '\x5', '\x16', '\f', 
		'\x2', '~', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x83', '\x85', '\t', '\x2', 
		'\x2', '\x2', '\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x8A', '\x5', '\x12', '\n', '\x2', '\x89', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\xF0', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8F', 
		'\a', '\t', '\x2', '\x2', '\x8E', '\x90', '\x5', '\x12', '\n', '\x2', 
		'\x8F', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x93', '\x94', '\x5', '\"', '\x12', '\x2', '\x94', '\xF0', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x97', '\a', '\n', '\x2', '\x2', '\x96', '\x98', 
		'\a', '\x1E', '\x2', '\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9A', '\x3', '\x2', 
		'\x2', '\x2', '\x99', '\x9B', '\x5', '\x34', '\x1B', '\x2', '\x9A', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x9B', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9E', '\a', '\x1E', 
		'\x2', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\xA1', '\a', '\x1F', '\x2', '\x2', '\xA0', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xF0', '\x5', '\"', 
		'\x12', '\x2', '\xA5', '\xA7', '\a', '\v', '\x2', '\x2', '\xA6', '\xA8', 
		'\x5', '\x12', '\n', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\xAD', '\x5', '\x1E', '\x10', '\x2', 
		'\xAC', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB3', '\a', '\f', 
		'\x2', '\x2', '\xB2', '\xB4', '\x5', '\x12', '\n', '\x2', '\xB3', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB9', 
		'\x5', '\x14', '\v', '\x2', '\xB8', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xB9', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xBD', '\xC1', '\a', '\r', '\x2', '\x2', '\xBE', '\xC0', '\a', '\x1E', 
		'\x2', '\x2', '\xBF', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC7', 
		'\a', '\x1B', '\x2', '\x2', '\xC5', '\xC8', '\x5', '\x34', '\x1B', '\x2', 
		'\xC6', '\xC8', '\a', '\x1E', '\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xCD', '\x5', '\x12', '\n', '\x2', '\xCC', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD2', 
		'\x5', '\b', '\x5', '\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\xD8', '\a', '\xE', '\x2', '\x2', '\xD7', '\xD9', '\a', '\x1E', 
		'\x2', '\x2', '\xD8', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\xDD', '\a', '\x1B', '\x2', '\x2', '\xDD', '\xE0', 
		'\a', '\x1E', '\x2', '\x2', '\xDE', '\xE1', '\x5', '\x34', '\x1B', '\x2', 
		'\xDF', '\xE1', '\a', '\x1E', '\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE6', '\x5', '\x12', '\n', '\x2', '\xE5', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEB', 
		'\x5', '(', '\x15', '\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xEF', 'M', '\x3', '\x2', '\x2', '\x2', '\xEF', '_', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', 'g', '\x3', '\x2', '\x2', '\x2', '\xEF', 'o', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', 'w', '\x3', '\x2', '\x2', '\x2', '\xEF', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\xEF', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\xEF', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xD6', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xF4', '\x5', '\x34', '\x1B', '\x2', '\xF2', '\xF4', '\x5', '\x12', 
		'\n', '\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF2', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF9', '\x5', '\n', '\x6', '\x2', '\xF6', '\xF9', '\x5', '\f', 
		'\a', '\x2', '\xF7', '\xF9', '\x5', '\xE', '\b', '\x2', '\xF8', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xFC', '\a', '\xF', '\x2', '\x2', '\xFB', '\xFD', 
		'\x5', '\x12', '\n', '\x2', '\xFC', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\x103', '\x5', '\x10', '\t', '\x2', 
		'\x101', '\x103', '\x5', '\x12', '\n', '\x2', '\x102', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x101', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x104', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x104', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\x109', '\a', '\x10', '\x2', '\x2', '\x108', '\x10A', '\x5', '\x12', 
		'\n', '\x2', '\x109', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x110', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x10F', '\x5', '\x14', '\v', '\x2', '\x10E', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x110', '\x3', '\x2', '\x2', '\x2', '\x113', '\x115', '\a', 
		'\x11', '\x2', '\x2', '\x114', '\x116', '\x5', '\x12', '\n', '\x2', '\x115', 
		'\x114', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\x3', '\x2', '\x2', 
		'\x2', '\x117', '\x115', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x11B', '\x5', '\x14', '\v', '\x2', '\x11A', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x11A', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\xF', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x122', '\x5', ',', '\x17', '\x2', '\x120', 
		'\x123', '\x5', '\x34', '\x1B', '\x2', '\x121', '\x123', '\a', '\x1E', 
		'\x2', '\x2', '\x122', '\x120', '\x3', '\x2', '\x2', '\x2', '\x122', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x122', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x126', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x127', '\a', '\x1F', '\x2', '\x2', '\x127', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x129', '\t', '\x3', '\x2', '\x2', '\x129', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12B', '\x5', ',', '\x17', '\x2', '\x12B', 
		'\x12D', '\x5', '&', '\x14', '\x2', '\x12C', '\x12E', '\x5', '\x12', '\n', 
		'\x2', '\x12D', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x130', '\x3', '\x2', '\x2', '\x2', '\x130', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x133', '\a', '\x1E', '\x2', '\x2', '\x132', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\x133', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x134', '\x132', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x136', '\x134', '\x3', '\x2', '\x2', '\x2', '\x137', '\x13A', '\a', 
		'\x12', '\x2', '\x2', '\x138', '\x13B', '\x5', '\x34', '\x1B', '\x2', 
		'\x139', '\x13B', '\a', '\x1E', '\x2', '\x2', '\x13A', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x140', '\x5', '\x12', '\n', '\x2', 
		'\x13F', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\x3', 
		'\x2', '\x2', '\x2', '\x141', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x142', '\x146', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x145', '\x5', '\x18', '\r', '\x2', '\x144', '\x143', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x144', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x17', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x146', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14C', '\x5', '\x34', 
		'\x1B', '\x2', '\x14A', '\x14C', '\a', '\x1E', '\x2', '\x2', '\x14B', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14A', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14B', 
		'\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\x5', 
		'\x12', '\n', '\x2', '\x150', '\x19', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x154', '\x5', '\x1C', '\xF', '\x2', '\x152', '\x154', '\x5', '\x12', 
		'\n', '\x2', '\x153', '\x151', '\x3', '\x2', '\x2', '\x2', '\x153', '\x152', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x153', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x15A', '\x5', '\x34', '\x1B', '\x2', '\x158', '\x15A', '\a', '\x1E', 
		'\x2', '\x2', '\x159', '\x157', '\x3', '\x2', '\x2', '\x2', '\x159', '\x158', 
		'\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x15B', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\x3', 
		'\x2', '\x2', '\x2', '\x15C', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x15E', '\a', '\x1D', '\x2', '\x2', '\x15E', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x15F', '\x161', '\a', '\x1E', '\x2', '\x2', '\x160', '\x15F', 
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x160', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\x3', 
		'\x2', '\x2', '\x2', '\x163', '\x165', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x165', '\x167', '\x5', '\x34', 
		'\x1B', '\x2', '\x166', '\x168', '\a', '\x1E', '\x2', '\x2', '\x167', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x169', '\x167', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x16B', '\x16D', '\x5', '\x34', '\x1B', '\x2', '\x16C', '\x16E', '\a', 
		'\x1E', '\x2', '\x2', '\x16D', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x16D', '\x3', '\x2', '\x2', 
		'\x2', '\x16F', '\x170', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', 
		'\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\x5', ' ', '\x11', '\x2', 
		'\x172', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x173', '\x17D', '\a', '\x13', 
		'\x2', '\x2', '\x174', '\x178', '\a', '\x14', '\x2', '\x2', '\x175', '\x177', 
		'\a', '\x1E', '\x2', '\x2', '\x176', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x177', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x178', '\x176', '\x3', 
		'\x2', '\x2', '\x2', '\x178', '\x179', '\x3', '\x2', '\x2', '\x2', '\x179', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x178', '\x3', '\x2', '\x2', 
		'\x2', '\x17B', '\x17D', '\x5', ',', '\x17', '\x2', '\x17C', '\x173', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x174', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x180', '\a', 
		'\x1F', '\x2', '\x2', '\x17F', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x180', 
		'\x181', '\x3', '\x2', '\x2', '\x2', '\x181', '\x17F', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x182', '\x3', '\x2', '\x2', '\x2', '\x182', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x185', '\x5', '$', '\x13', '\x2', '\x184', 
		'\x183', '\x3', '\x2', '\x2', '\x2', '\x185', '\x188', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x184', '\x3', '\x2', '\x2', '\x2', '\x186', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x187', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x186', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\x5', 
		',', '\x17', '\x2', '\x18A', '\x18C', '\x5', '&', '\x14', '\x2', '\x18B', 
		'\x18D', '\a', '\x1F', '\x2', '\x2', '\x18C', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '\x18D', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '%', '\x3', '\x2', '\x2', '\x2', '\x190', '\x195', '\a', '!', 
		'\x2', '\x2', '\x191', '\x194', '\x5', '\x34', '\x1B', '\x2', '\x192', 
		'\x194', '\a', '\x1E', '\x2', '\x2', '\x193', '\x191', '\x3', '\x2', '\x2', 
		'\x2', '\x193', '\x192', '\x3', '\x2', '\x2', '\x2', '\x194', '\x197', 
		'\x3', '\x2', '\x2', '\x2', '\x195', '\x193', '\x3', '\x2', '\x2', '\x2', 
		'\x195', '\x196', '\x3', '\x2', '\x2', '\x2', '\x196', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x197', '\x195', '\x3', '\x2', '\x2', '\x2', '\x198', '\x19B', 
		'\x5', '*', '\x16', '\x2', '\x199', '\x19B', '\a', '\x1E', '\x2', '\x2', 
		'\x19A', '\x198', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x199', '\x3', 
		'\x2', '\x2', '\x2', '\x19B', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19C', 
		'\x19A', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x19D', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x1A0', 
		'\a', '\x1F', '\x2', '\x2', '\x19F', '\x19E', '\x3', '\x2', '\x2', '\x2', 
		'\x1A0', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x19F', '\x3', 
		'\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A2', 
		')', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\t', '\x4', '\x2', 
		'\x2', '\x1A4', '+', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A8', '\x5', 
		'.', '\x18', '\x2', '\x1A6', '\x1A8', '\x5', '\x32', '\x1A', '\x2', '\x1A7', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A6', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x1AA', '-', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AE', '\a', '\x1B', 
		'\x2', '\x2', '\x1AC', '\x1AE', '\x5', '\x30', '\x19', '\x2', '\x1AD', 
		'\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AC', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '/', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B3', '\a', 
		'\x1B', '\x2', '\x2', '\x1B0', '\x1B2', '\a', '\x1E', '\x2', '\x2', '\x1B1', 
		'\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B5', '\x3', '\x2', '\x2', 
		'\x2', '\x1B3', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', 
		'\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B6', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1BA', '\a', 
		'\x15', '\x2', '\x2', '\x1B7', '\x1B9', '\a', '\x1E', '\x2', '\x2', '\x1B8', 
		'\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BC', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', 
		'\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BD', '\x3', '\x2', '\x2', '\x2', 
		'\x1BC', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BE', '\a', 
		'\x1B', '\x2', '\x2', '\x1BE', '\x31', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		'\x1C3', '\a', '\x1E', '\x2', '\x2', '\x1C0', '\x1C1', '\a', '\x16', '\x2', 
		'\x2', '\x1C1', '\x1C3', '\a', '\x1F', '\x2', '\x2', '\x1C2', '\x1BF', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C0', '\x3', '\x2', '\x2', '\x2', 
		'\x1C3', '\x33', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1DD', '\a', '\r', 
		'\x2', '\x2', '\x1C5', '\x1DD', '\a', '\xE', '\x2', '\x2', '\x1C6', '\x1DD', 
		'\a', '\f', '\x2', '\x2', '\x1C7', '\x1DD', '\a', '\v', '\x2', '\x2', 
		'\x1C8', '\x1DD', '\a', '\n', '\x2', '\x2', '\x1C9', '\x1DD', '\a', '\x17', 
		'\x2', '\x2', '\x1CA', '\x1DD', '\a', '\t', '\x2', '\x2', '\x1CB', '\x1DD', 
		'\a', '\a', '\x2', '\x2', '\x1CC', '\x1DD', '\a', '\x6', '\x2', '\x2', 
		'\x1CD', '\x1DD', '\a', '\x5', '\x2', '\x2', '\x1CE', '\x1DD', '\a', '\x4', 
		'\x2', '\x2', '\x1CF', '\x1DD', '\a', '\x3', '\x2', '\x2', '\x1D0', '\x1DD', 
		'\a', '\x13', '\x2', '\x2', '\x1D1', '\x1DD', '\a', '\x14', '\x2', '\x2', 
		'\x1D2', '\x1DD', '\a', '\xF', '\x2', '\x2', '\x1D3', '\x1DD', '\a', '\x10', 
		'\x2', '\x2', '\x1D4', '\x1DD', '\a', '\x11', '\x2', '\x2', '\x1D5', '\x1DD', 
		'\a', '\x18', '\x2', '\x2', '\x1D6', '\x1DD', '\a', '\x19', '\x2', '\x2', 
		'\x1D7', '\x1DD', '\a', '\x16', '\x2', '\x2', '\x1D8', '\x1DD', '\a', 
		'\x15', '\x2', '\x2', '\x1D9', '\x1DD', '\a', '\x1B', '\x2', '\x2', '\x1DA', 
		'\x1DD', '\a', '\x1C', '\x2', '\x2', '\x1DB', '\x1DD', '\a', '!', '\x2', 
		'\x2', '\x1DC', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1C6', '\x3', '\x2', '\x2', '\x2', 
		'\x1DC', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1C8', '\x3', 
		'\x2', '\x2', '\x2', '\x1DC', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1DC', 
		'\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1CB', '\x3', '\x2', '\x2', 
		'\x2', '\x1DC', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1CE', '\x3', '\x2', '\x2', '\x2', 
		'\x1DC', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1D0', '\x3', 
		'\x2', '\x2', '\x2', '\x1DC', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1DC', 
		'\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1D3', '\x3', '\x2', '\x2', 
		'\x2', '\x1DC', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1D5', 
		'\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1D6', '\x3', '\x2', '\x2', '\x2', 
		'\x1DC', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1D8', '\x3', 
		'\x2', '\x2', '\x2', '\x1DC', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1DC', 
		'\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DB', '\x3', '\x2', '\x2', 
		'\x2', '\x1DD', '\x35', '\x3', '\x2', '\x2', '\x2', 'Q', '\x39', ';', 
		'@', '\x42', '\x46', 'H', 'Q', 'W', ']', '\x63', 'k', 's', '{', '\x80', 
		'\x86', '\x8B', '\x91', '\x97', '\x9A', '\x9D', '\xA2', '\xA9', '\xAE', 
		'\xB5', '\xBA', '\xC1', '\xC7', '\xC9', '\xCE', '\xD3', '\xDA', '\xE0', 
		'\xE2', '\xE7', '\xEC', '\xEF', '\xF3', '\xF8', '\xFE', '\x102', '\x104', 
		'\x10B', '\x110', '\x117', '\x11C', '\x122', '\x124', '\x12F', '\x134', 
		'\x13A', '\x13C', '\x141', '\x146', '\x14B', '\x14D', '\x153', '\x155', 
		'\x159', '\x15B', '\x162', '\x169', '\x16F', '\x178', '\x17C', '\x181', 
		'\x186', '\x18E', '\x193', '\x195', '\x19A', '\x19C', '\x1A1', '\x1A7', 
		'\x1A9', '\x1AD', '\x1B3', '\x1BA', '\x1C2', '\x1DC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
